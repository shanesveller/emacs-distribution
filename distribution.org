#+STARTUP: content
#+STARTUP: nohideblocks
#+STARTUP: align
#+STARTUP: indent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* References
** Emacs
   - http://sachachua.com/blog/category/geek/emacs/
   - http://sachachua.com/blog/category/geek/emacs/emacs-news/
   - https://www.emacswiki.org/
   - https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf
*** Emacs Lisp
- https://www.emacswiki.org/emacs/ElispCookbook
**** Emacs Package Developer's Handbook
References:
- https://github.com/alphapapa/emacs-package-dev-handbook
- https://alphapapa.github.io/emacs-package-dev-handbook/
**** Setq vs Defvar
References:
- https://emacs.stackexchange.com/questions/29710/whats-the-difference-between-setq-and-defvar
*** Org Mode
**** In-buffer settings
     References
     - https://orgmode.org/manual/In_002dbuffer-settings.html
*** Notable Users
    - https://github.com/Fuco1
    - https://github.com/Malabarba
    - https://github.com/TheBB
    - https://github.com/abo-abo
    - https://github.com/alphapapa
    - https://github.com/bbatsov
    - https://github.com/jwiegley
    - https://github.com/mickeynp
*** Notable Configurations
- http://pages.sachachua.com/.emacs.d/Sacha.html
- https://github.com/jwiegley/dot-emacs
- https://github.com/purcell/emacs.d
- https://github.com/Fuco1/.emacs.d
*** User Configurations
- https://sriramkswamy.github.io/dotemacs/
*** Blog Posts
    - https://diego.codes/post/emacs-2018/
** Package Management
*** Straight.el
    - https://github.com/raxod502/straight.el
*** Use-package
    - https://github.com/jwiegley/use-package
** Default Keybindings
- ~g x~ - ~browse-url-at-point~
* Bootstrap
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Lexical Bindings
   #+BEGIN_SRC emacs-lisp :comments no
     ;; -*- lexical-binding: t -*-
   #+END_SRC
** Emacs Home Directory
   References:
   - https://emacs.stackexchange.com/questions/4253/how-to-start-emacs-with-a-custom-user-emacs-directory
   #+BEGIN_SRC emacs-lisp
     (setq user-init-file (or load-file-name (buffer-file-name))
           user-emacs-directory (file-name-directory user-init-file))
   #+END_SRC
** Garbage Collection
   References:
   - https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413
   - http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html
   - https://batsov.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/
   #+BEGIN_SRC emacs-lisp
     (defvar last-file-name-handler-alist file-name-handler-alist)
     (defvar last-gc-cons-percentage gc-cons-percentage)
     (defvar last-gc-cons-threshold gc-cons-threshold)
     (setq file-name-handler-alist nil
           gc-cons-percentage 0.9
           gc-cons-threshold most-positive-fixnum)
   #+END_SRC
** Straight.el
References:
- https://github.com/raxod502/straight.el/tree/6c47044bfbc419527de4d345ceaf01dea3a3b03d#getting-started
- https://github.com/raxod502/straight.el/issues/41
  #+BEGIN_SRC emacs-lisp
    (setq straight-check-for-modifications '(check-on-save find-when-checking)
          straight-repository-branch "develop")
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+END_SRC
** Use-package
   #+BEGIN_SRC emacs-lisp
     (setq straight-use-package-by-default t
           use-package-compute-statistics t)
     (straight-use-package 'use-package)
   #+END_SRC
** Initialization Profiling
   #+BEGIN_SRC emacs-lisp
     (use-package benchmark-init
       :demand
       :hook (after-init . benchmark-init/deactivate))
   #+END_SRC
* Configuration
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Personal Information
   References:
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html
   - http://pages.sachachua.com/.emacs.d/Sacha.html#org21ba8a0
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Shane Sveller"
           user-mail-address "shane@shanesveller.com")
   #+END_SRC
** Scratch buffer contents
   [2019-01-04 Fri 10:11]
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC
** TODO Tab Width
   [2019-02-10 Sun 11:39]
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 2)
   #+END_SRC
** TODO Encryption Target
   [2019-02-10 Sun 11:56]
   #+BEGIN_SRC emacs-lisp
     (setq epa-file-encrypt-to '("shanesveller@gmail.com" "shane@shanesveller.com"))
   #+END_SRC
* Behavior
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Self-Reload
   References:
   - https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization
   #+BEGIN_SRC emacs-lisp
     (defvar my/config-file
       (concat user-emacs-directory "distribution.org")
       "Location of root .org file governing this Emacs installation.")
     (defun my/edit-config ()
       "Visit .org configuration file via find-file"
       (interactive)
       (find-file my/config-file))
     (defun my/reload-config ()
       "Automatically reloads configuration via org-babel-load-file"
       (interactive)
       (straight-transaction
         (straight-mark-transaction-as-init)
         (org-babel-tangle-file my/config-file)
         (message "Reloading init.el...")
         (load user-init-file nil 'nomessage)
         (message "Reloading init.el... done.")))
   #+END_SRC
** Inhibit File Backups
   References:
   - http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
   - https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil
           create-lockfiles nil
           make-backup-files nil)
   #+END_SRC
** Startup Performance
   References:
   - https://github.com/jschaf/esup
   - https://github.com/jschaf/esup/issues/51
   - https://oremacs.com/2015/02/24/emacs-speed-test/
   #+BEGIN_SRC emacs-lisp
     (use-package esup :commands 'esup)
   #+END_SRC
** Window Management
*** Winner Mode
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC
** TODO undo-tree
   [2019-02-10 Sun 11:30]
   References:
   - https://elpa.gnu.org/packages/undo-tree.html
   - http://www.dr-qubit.org/undo-tree.html
   - http://pragmaticemacs.com/emacs/advanced-undoredo-with-undo-tree/
   - https://cestlaz.github.io/posts/using-emacs-16-undo-tree/
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :defer
       (global-undo-tree-mode))
   #+END_SRC
** TODO yes-or-no-prompt
   [2019-03-05 Tue 16:20]
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** TODO ibuffer
   [2019-03-05 Tue 16:23]
   References:
   - https://www.emacswiki.org/emacs/IbufferMode
   #+BEGIN_SRC emacs-lisp
     (use-package ibuffer
       :defer t
       :bind ("C-x C-b" . ibuffer))
   #+END_SRC
* Features
   :PROPERTIES:
   :header-args: :tangle init.el
   :END:
** TODO Evil-Mode
   References:
   - https://github.com/emacs-evil/evil
   - https://www.emacswiki.org/emacs/Evil
   - https://stackoverflow.com/a/22922161
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :init (setq evil-want-C-i-jump nil)
       :config (evil-mode 1))
   #+END_SRC
*** TODO evil-nerd-commenter
   [2019-01-02 Wed 16:07]
   References:
   - https://github.com/redguardtoo/evil-nerd-commenter
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :after evil
       :config (evilnc-default-hotkeys))
   #+END_SRC
*** TODO evil-collection
   [2019-02-08 Fri 19:23]
   References:
   - https://github.com/emacs-evil/evil-collection
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :after '(evil magit-todos)
       :config
       (evil-collection-init 'magit-todos))
   #+END_SRC
** TODO Which-key
   References:
   - https://github.com/justbur/emacs-which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config
       (which-key-mode 1)
       (which-key-setup-minibuffer))
   #+END_SRC
** TODO General
   [2019-01-02 Wed 10:39]
   References:
   - https://github.com/noctuid/general.el
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :commands 'general-define-key)
   #+END_SRC
** TODO Counsel/Ivy/Swiper
   [2018-12-30 Sun 14:47]
   References:
   - https://github.com/abo-abo/swiper
   - http://oremacs.com/swiper/#key-bindings
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :bind
       (("C-c C-r" . ivy-resume))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t
             ivy-count-format "(%d/%d) "))

     (use-package counsel
       :bind
       (("M-x" . counsel-M-x)
        ("C-x b" . counsel-switch-buffer)
        ("C-h f" . counsel-describe-function)
        ("C-h v" . counsel-describe-variable)
        ("C-h l" . counsel-find-library)
        ("C-h i" . counsel-info-lookup-symbol)
        ("C-h u" . counsel-unicode-char)))

     (use-package swiper
       :bind
       (("C-s" . swiper)))
   #+END_SRC
** TODO Hydra
   [2018-12-30 Sun 13:28]
   References:
   - https://github.com/abo-abo/hydra
   #+BEGIN_SRC emacs-lisp
     (use-package hydra :defer t)
   #+END_SRC
** TODO transient
   [2019-02-17 Sun 10:26]
   References:
   - https://github.com/magit/transient
   - https://emacsair.me/2019/02/14/transient-0.1/
   - https://magit.vc/manual/transient/index.html
   #+BEGIN_SRC emacs-lisp
     (use-package transient
       :commands (define-transient-command define-infix-command define-suffix-command transient-append-suffix transient-insert-suffix))
   #+END_SRC
*** TODO transient-distribution
   [2019-02-18 Mon 14:19]
   References:
   - https://github.com/magit/transient
   - https://emacsair.me/2019/02/14/transient-0.1/
   - https://magit.vc/manual/transient/index.html
   #+BEGIN_SRC emacs-lisp
     (define-transient-command my/distribution
       ""
       [["Org-mode"
         ("c" "capture" org-capture)]
        ["Configuration"
         ("e" "edit config" my/edit-config)
         ("r" "reload config" my/reload-config)
         ("u" "use-package report" use-package-report)]
        ["Performance"
         ("i" "init durations" benchmark-init/show-durations-tree)]
        ["Shortcuts"
         ("g" "magit status" unpackaged/magit-status)]])

     (general-define-key
      "<f5>" 'my/distribution)
   #+END_SRC
*** TODO transient-straight
   [2019-02-18 Mon 14:22]
   References:
   - https://github.com/magit/transient
   - https://emacsair.me/2019/02/14/transient-0.1/
   - https://magit.vc/manual/transient/index.html
   - https://github.com/abo-abo/hydra/wiki/straight.el
   #+BEGIN_SRC emacs-lisp
     (define-transient-command my/hydra-helper
       ""
       [[("c" "check all" straight-check-all)
         ("C" "check package" straight-check-package)
         ("r" "rebuild all" straight-rebuild-all)
         ("R" "rebuild package" straight-rebuild-package)]
        [("f" "fetch all" straight-fetch-all)
         ("F" "fetch package" straight-fetch-package)
         ("p" "pull all" straight-pull-all)
         ("P" "pull package" straight-pull-package)]
        [("m" "merge all" straight-merge-all)
         ("M" "merge package" straight-merge-package)
         ("n" "normalize all" straight-normalize-all)
         ("N" "normalize package" straight-normalize-package)]
        [("u" "push all" straight-push-all)
         ("U" "push package" straight-push-package)
         ("v" "freeze  versions" straight-freeze-versions)
         ("V" "thaw versions" straight-thaw-versions)]
        [("w" "start watcher" straight-watcher-start)
         ("W" "stop watcher" straight-watcher-stop)
         ("g" "get recipe" straight-get-recipe)
         ("e" "prune build" straight-prune-build)]])

     (transient-append-suffix 'my/distribution 'my/reload-config
       '("s" "straight.el" my/hydra-helper))
   #+END_SRC
** TODO Magit
   References:
   - https://github.com/magit/magit
   - https://magit.vc/
   - https://magit.vc/manual/magit/Installation.html
   - https://github.com/emacs-evil/evil-magit
   - https://github.com/alphapapa/magit-todos
   - https://github.com/tarsius/git-elisp-overview
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :commands 'magit-status
       :custom (magit-rebase-arguments '("--autosquash" "--autostash" "--interactive")))
     (use-package evil-magit
       :after magit)
   #+END_SRC
*** TODO Forge
    References:
    - https://emacsair.me/2018/12/19/forge-0.1/
    - https://github.com/magit/forge
    - https://magit.vc/manual/forge/
    #+BEGIN_SRC emacs-lisp
      (use-package forge
        :after magit)
    #+END_SRC
*** TODO magit-gitflow
   [2019-01-02 Wed 16:11]
   References:
   - https://github.com/jtatarik/magit-gitflow
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :after magit
       :hook (magit-mode . turn-on-magit-gitflow)
       :config
       (transient-append-suffix 'magit-dispatch 'magit-worktree
         '("C-f" "Git-flow" magit-gitflow-popup)))

   #+END_SRC
*** TODO magit-todos
   [2019-02-08 Fri 19:22]
   References:
   - https://github.com/alphapapa/magit-todos
   #+BEGIN_SRC emacs-lisp
     (use-package magit-todos
       :after magit
       :config
       (magit-todos-mode 1))
   #+END_SRC
** TODO git-gutter-plus                                                :git:
   [2019-03-06 Wed 13:04]
   References:
   - https://github.com/nonsequitur/git-gutter-plus
   - https://github.com/nonsequitur/git-gutter-plus#use-package-setup
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter+
       :commands (git-gutter+-mode global-git-gutter+-mode)
       :hook (prog-mode . git-gutter+-mode))
   #+END_SRC
** TODO Org-Mode
[2019-04-25 Thu 16:44]
References:
- https://orgmode.org/
- https://github.com/emacsmirror/org
- https://github.com/raxod502/straight.el/issues/211#issuecomment-355379837
- https://github.com/raxod502/straight.el/tree/6c47044bfbc419527de4d345ceaf01dea3a3b03d#installing-org-with-straightel
- https://github.com/raxod502/straight.el#integration-with-org
- https://github.com/raxod502/straight.el/issues/211
  #+BEGIN_SRC emacs-lisp
    (use-package org :defer t)
  #+END_SRC
*** TODO Evil-Org
    [2019-01-02 Wed 10:10]
    References:
    - https://github.com/Somelauw/evil-org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :commands 'evil-org-mode
        :hook (org-mode . evil-org-mode)
        :config (progn
                  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
    #+END_SRC
*** TODO Org-Capture
    References:
    - https://orgmode.org/manual/Easy-templates.html
    - https://orgmode.org/manual/Capture-templates.html
    - https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html
    - https://orgmode.org/manual/Template-expansion.html#Template-expansion
    - https://orgmode.org/manual/Templates-in-contexts.html#Templates-in-contexts
    - https://emacs.stackexchange.com/a/42140
    - https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("d" "Distribution" entry
               (file+headline (lambda () (concat user-emacs-directory "distribution.org")) "New Content")
               "** TODO \n   %U\n   References:\n   - \n   #+BEGIN_SRC emacs-lisp\n   #+END_SRC")))
    #+END_SRC
*** TODO Refile Targets
    [2019-01-02 Wed 10:25]
    References:
    - https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/czfzxjj/
    #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets
            (quote (("distribution.org" :maxlevel . 2))))
    #+END_SRC
*** TODO org-super-agenda
   [2019-02-10 Sun 15:04]
   References:
   - https://github.com/alphapapa/org-super-agenda
   #+BEGIN_SRC emacs-lisp
     (use-package org-super-agenda
       :defer t)
   #+END_SRC
*** TODO ox-reveal
   [2019-03-07 Thu 14:07]
   References:
   - https://github.com/yjwen/org-reveal
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :after 'org)
   #+END_SRC
*** TODO org-d20
   [2019-03-07 Thu 14:00]
   References:
   - https://spwhitton.name/tech/code/org-d20/
   #+BEGIN_SRC emacs-lisp
     (use-package org-d20
       :commands 'org-d20-mode)
   #+END_SRC
** TODO Projectile
   [2018-12-30 Sun 14:15]
   References:
   - https://github.com/bbatsov/projectile
   - https://docs.projectile.mx
   - https://projectile.readthedocs.io/en/latest/
   - https://github.com/purcell/ibuffer-projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :defer t
       :hook (prog-mode . projectile-mode)
       :config
       (projectile-global-mode 1))

     (use-package ibuffer-projectile
       :defer t
       :after 'projectile
       :hook (ibuffer . (lambda ()
                          (ibuffer-projectile-set-filter-groups)
                          (unless (eq ibuffer-sorting-mode 'alphabetic)
                            (ibuffer-do-sort-by-alphabetic)))))
   #+END_SRC
** TODO Unpackaged
   References:
   - https://github.com/alphapapa/unpackaged.el
   #+BEGIN_SRC emacs-lisp
     (use-package unpackaged
       :straight (:type git :host github :repo "alphapapa/unpackaged.el")
       :commands 'unpackaged/magit-status)
   #+END_SRC
** TODO Avy
   [2018-12-30 Sun 15:26]
   References:
   - https://github.com/abo-abo/avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :defer t
       :commands (avy-isearch avy-pop-mark avy-resume avy-with)
       :config (progn
                 (avy-setup-default)
                 (global-set-key (kbd "C-c C-j") 'avy-resume)))
   #+END_SRC
** TODO Imenu-List
   [2019-01-02 Wed 10:29]
   References:
   - https://github.com/bmag/imenu-list
   #+BEGIN_SRC emacs-lisp
     (use-package imenu-list
       :defer t
       :init
       (setq imenu-list-focus-after-activation t
             imenu-list-auto-resize t))
   #+END_SRC
** TODO Company
   [2019-01-02 Wed 11:58]
   References:
   - http://company-mode.github.io/
   - https://github.com/company-mode/company-mode/wiki/Third-Party-Packages
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :commands (company-mode global-company-mode)
       :hook (after-init . global-company-mode))
   #+END_SRC
** TODO Flycheck
   [2019-01-02 Wed 12:04]
   References:
   - http://www.flycheck.org/en/latest/
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :commands (flycheck-mode global-flycheck-mode)
       :hook (after-init . global-flycheck-mode))
   #+END_SRC
*** TODO flycheck-inline
   [2019-01-02 Wed 15:55]
   References:
   - https://github.com/flycheck/flycheck-inline
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-inline
       :defer t
       :after flycheck
       :hook (flycheck-mode . turn-on-flycheck-inline))
   #+END_SRC
** TODO smartparens
   [2019-01-02 Wed 16:58]
   References:
   - https://github.com/Fuco1/smartparens
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :defer t
       :commands 'smartparens-mode
       :hook (elixir-mode . smartparens-mode))
   #+END_SRC
** TODO yasnippet
   [2019-02-18 Mon 14:03]
   References:
   - https://github.com/joaotavora/yasnippet
   - https://joaotavora.github.io/yasnippet/
   - https://joaotavora.github.io/yasnippet/snippet-development.html
   - https://github.com/AndreaCrotti/yasnippet-snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config (yas-global-mode 1))

     (use-package yasnippet-snippets
       :after (elixir-mode rust-mode))
   #+END_SRC
** TODO paradox
   [2019-03-07 Thu 14:02]
   References:
   - https://github.com/Malabarba/paradox
   #+BEGIN_SRC emacs-lisp
     (use-package paradox
       :commands 'paradox-list-packages)
   #+END_SRC
** TODO elfeed                                                  :elfeed:rss:
   [2019-03-07 Thu 14:08]
   References:
   - https://github.com/skeeto/elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :commands 'elfeed
       :config
       (setq elfeed-feeds '("http://planet.emacsen.org/atom.xml")))
   #+END_SRC
*** TODO elfeed-org                                        :elfeed:org:rss:
   [2019-03-11 Mon 19:02]
   References:
   - https://github.com/remyhonig/elfeed-org
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed-org
       :after 'elfeed
       :config
       (elfeed-org))
   #+END_SRC
** TODO restart-emacs
   [2019-03-07 Thu 13:55]
   References:
   - https://github.com/iqbalansari/restart-emacs
   #+BEGIN_SRC emacs-lisp
     (use-package restart-emacs
       :if (string= "~/.emacs.d/" user-emacs-directory)
       :commands 'restart-emacs)
   #+END_SRC
** TODO dumb-jump
   [2019-03-07 Thu 14:07]
   References:
   - https://github.com/jacktasia/dumb-jump
   - https://github.com/jacktasia/dumb-jump#use-package-example-configuration
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :init
       :bind (("M-g o" . dumb-jump-go-other-window)
              ("M-g j" . dumb-jump-go)
              ("M-g i" . dumb-jump-go-prompt)
              ("M-g x" . dumb-jump-go-prefer-external)
              ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config
       (setq dumb-jump-selector 'ivy))
   #+END_SRC
** TODO outshine
   [2019-03-07 Thu 13:59]
   References:
   - https://github.com/alphapapa/outshine
   #+BEGIN_SRC emacs-lisp
     (use-package outshine
       :commands 'outshine-minor-mode)
   #+END_SRC
** TODO expand-region
   [2019-03-07 Thu 14:07]
   References:
   - https://github.com/magnars/expand-region.el
   - http://emacsrocks.com/e09.html
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :defer t)
   #+END_SRC
** TODO hackernews
   [2019-03-11 Mon 19:40]
   References:
   - https://github.com/clarete/hackernews.el
   #+BEGIN_SRC emacs-lisp
     (use-package hackernews
       :commands 'hackernews)
   #+END_SRC
** TODO reddit
   [2019-03-11 Mon 19:41]
   References:
   - https://github.com/ahungry/md4rd
   - https://github.com/ahungry/md4rd#keys
   #+BEGIN_SRC emacs-lisp
     (use-package md4rd
       :commands 'md4rd
       :config
       (setq md4rd-subs-active
             '(emacs evilmode lisp orgmode planetemacs spacemacs)))
   #+END_SRC
** TODO helpful                                                       :docs:
   [2019-03-27 Wed 11:51]
   References:
   - https://github.com/Wilfred/helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :bind (("C-h F" . helpful-function)))
   #+END_SRC
* Languages
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** TODO LSP
*** TODO lsp-mode
   [2019-01-02 Wed 16:14]
   References:
   - https://github.com/emacs-lsp/lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode :commands lsp)

     (use-package lsp-ui :commands lsp-ui-mode)

     (use-package company-lsp :commands company-lsp)
   #+END_SRC
*** TODO dap-mode
   [2019-02-10 Sun 13:17]
   References:
   - https://github.com/yyoncho/dap-mode
   #+BEGIN_SRC emacs-lisp
     (use-package dap-mode
       :defer t
       :config
       (dap-mode 1)
       (dap-ui-mode 1))
   #+END_SRC
*** TODO company-lsp
   [2019-02-10 Sun 14:49]
   References:
   - http://company-mode.github.io/
   - https://github.com/tigersoldier/company-lsp
   #+BEGIN_SRC emacs-lisp
     (use-package company-lsp
       :after company-mode
       :config
       (push 'company-lsp company-backends))
   #+END_SRC
** TODO Clojure
*** TODO cider
   [2019-01-02 Wed 15:47]
   References:
   - https://github.com/clojure-emacs/cider
   #+BEGIN_SRC emacs-lisp
     (use-package cider
       :defer t
       :commands (cider-connect cider-jack-in))
   #+END_SRC
** TODO Elixir
*** TODO elixir-mode
   [2019-01-02 Wed 14:34]
   References:
   - https://github.com/elixir-editors/emacs-elixir
   #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :commands 'elixir-mode)
   #+END_SRC
*** TODO Alchemist
   [2019-01-02 Wed 14:36]
   References:
   - https://github.com/tonini/alchemist.el
   - https://alchemist.readthedocs.io/en/latest/configuration/
   #+BEGIN_SRC emacs-lisp
     (use-package alchemist
       :disabled t
       :defer t)
   #+END_SRC
*** TODO lsp-elixir
   [2019-01-03 Thu 15:44]
   References:
   - https://github.com/trevoke/lsp-elixir
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-elixir
       :defer t
       :straight (:type git :host github :repo "elixir-lsp/lsp-elixir.el")
       :hook (elixir-mode . lsp)
       :config
       (if-let (elixir-ls-path (getenv "ELIXIR_LS_PATH"))
           (add-to-list 'exec-path elixir-ls-path)
         (add-to-list 'exec-path (f-expand "~/src/not_me/elixir-ls/release"))))
   #+END_SRC
*** TODO flycheck-mix
   [2019-02-08 Fri 19:16]
   References:
   - https://github.com/tomekowal/flycheck-mix
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-mix
       :after 'elixir-mode
       :commands 'flycheck-mix-setup
       :config
       (flycheck-mix-setup))
   #+END_SRC
*** TODO flycheck-credo
   [2019-02-08 Fri 19:17]
   References:
   - https://github.com/karmajunkie/flycheck-elixir-credo
   - https://github.com/aaronjensen/flycheck-credo
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-credo
       :after 'elixir-mode
       :commands 'flycheck-credo-setup
       :config
       (flycheck-credo-setup))
   #+END_SRC
** TODO Emacs-Lisp
*** TODO lispy
    [2019-01-02 Wed 15:08]
    References:
    - https://github.com/abo-abo/lispy
    - https://github.com/jwiegley/use-package#hooks
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package lispy
        :commands 'lispy-mode
        :hook (emacs-lisp-mode . lispy-mode))
    #+END_SRC
*** TODO eldoc
   [2019-02-10 Sun 11:40]
   References:
   - https://www.emacswiki.org/emacs/ElDoc
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
       :commands 'turn-on-eldoc-mode
       :defer t
       :hook ((emacs-lisp-mode lisp-interactive-mode ielm-mode) . turn-on-eldoc-mode))
   #+END_SRC
** TODO Rust
*** TODO rust-mode
   [2019-01-02 Wed 14:40]
   References:
   - https://github.com/rust-lang/rust-mode
   - https://github.com/jwiegley/use-package#modes-and-interpreters
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :defer t
       :commands 'rust-mode
       :config (setq rust-format-on-save t))
   #+END_SRC
*** TODO flycheck-rust
   [2019-01-02 Wed 14:42]
   References:
   - https://github.com/flycheck/flycheck-rust
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     ;; (with-eval-after-load 'rust-mode
     ;;   (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
     (use-package flycheck-rust
       :after rust-mode
       :hook (flycheck-mode-hook . flycheck-rust-setup))
   #+END_SRC
*** TODO racer
   [2019-01-02 Wed 14:44]
   References:
   - https://github.com/racer-rust/emacs-racer
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'rust-mode-hook #'racer-mode)
     ;; (add-hook 'racer-mode-hook #'eldoc-mode)
     (use-package racer
       :defer t
       :after rust-mode
       :hook ((rust-mode-hook . racer-mode)
              (racer-mode-hook . eldoc-mode)))
   #+END_SRC
*** TODO toml-mode
   [2019-01-02 Wed 14:50]
   References:
   - https://github.com/dryman/toml-mode.el
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :defer t
       :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
   #+END_SRC
*** TODO cargo
   [2019-01-02 Wed 16:45]
   References:
   - https://github.com/kwrooijen/cargo.el
   #+BEGIN_SRC emacs-lisp
     (use-package cargo
       :defer t
       :commands 'cargo-minor-mode
       :hook (rust-mode . cargo-minor-mode))
   #+END_SRC
** TODO Web Technologies
*** TODO web-mode
   [2019-01-02 Wed 14:38]
   References:
   - http://web-mode.org/
   - https://github.com/fxbois/web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :defer t
       :commands 'web-mode)
   #+END_SRC
** TODO Nix                                                            :nix:
*** TODO nix-mode
   [2019-01-02 Wed 17:06]
   References:
   - https://github.com/NixOS/nix-mode
   #+BEGIN_SRC emacs-lisp
     (use-package nix-mode
       :defer t
       :mode "\\.nix$\\'")
   #+END_SRC
*** TODO nix-update
   [2019-03-15 Fri 19:45]
   References:
   - https://github.com/jwiegley/nix-update-el
   #+BEGIN_SRC emacs-lisp
     (use-package nix-update
       :defer t
       :after 'nix-mode)
   #+END_SRC
** TODO graphviz
   [2019-02-10 Sun 13:24]
   References:
   - https://github.com/ppareit/graphviz-dot-mode
   #+BEGIN_SRC emacs-lisp
     (use-package graphviz-dot-mode
       :defer t)
   #+END_SRC
** TODO yaml-mode
   [2019-02-17 Sun 11:03]
   References:
   - https://github.com/yoshiki/yaml-mode
   - https://melpa.org/#/yaml-mode
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :mode "\\.\\(yml\\|yaml\\)\\'"
       :config (add-hook 'yaml-mode-hook
                         '(lambda ()
                            (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
   #+END_SRC
* Appearance
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Disable menu bar
   [2019-01-02 Wed 16:48]
   References:
   - https://www.emacswiki.org/emacs/MenuBar
   - https://www.emacswiki.org/emacs/ToolBar
   - https://stackoverflow.com/a/5795518
   - https://github.com/angrybacon/dotemacs/blob/d1a941fabed43f7a38db679e916f36ddb8b13a58/dotemacs.org#use-better-defaults
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (when (display-graphic-p)
       (blink-cursor-mode -1)
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1))
   #+END_SRC
** TODO Doom Theme
   [2018-12-30 Sun 15:22]
   References:
   - https://github.com/hlissner/emacs-doom-themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :disabled t
       :init (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                   doom-themes-enable-italic t) ; if nil, italics is universally disabled
       :config (progn
                 (load-theme 'doom-tomorrow-night t)
                 (doom-themes-visual-bell-config)
                 (with-eval-after-load 'org (doom-themes-org-config))))
   #+END_SRC
** TODO Minion/Moody
   [2018-12-30 Sun 15:38]
   References:
   - https://diego.codes/post/emacs-2018/
   - http://manuel-uberti.github.io/emacs/2018/03/10/moody-and-minions/
   - https://github.com/tarsius/minions
   - https://github.com/tarsius/moody
   #+BEGIN_SRC emacs-lisp
     (use-package moody
       :disabled t
       :config
       (setq x-underline-at-descent-line t)
       (moody-replace-mode-line-buffer-identification)
       (moody-replace-vc-mode))

     (use-package minions
       :disabled t
       :config (minions-mode 1))
   #+END_SRC
** TODO base16-theme
   [2019-01-02 Wed 16:29]
   References:
   - https://github.com/belak/base16-emacs
   #+BEGIN_SRC emacs-lisp
     (use-package base16-theme
       :config (load-theme 'base16-tomorrow-night t))
   #+END_SRC
** TODO doom-modeline
   [2019-02-10 Sun 14:27]
   References:
   - https://github.com/seagle0128/doom-modeline
   - https://github.com/domtronn/all-the-icons.el#installation
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :hook (after-init . doom-modeline-mode)
       :config
       (let ((display-icons (display-graphic-p)))
         (setq doom-modeline-buffer-file-name-style 'truncate-except-project
               doom-modeline-enable-variable-pitch nil
               doom-modeline-github nil
               doom-modeline-icon display-icons
               doom-modeline-lsp nil
               doom-modeline-major-mode-color-icon display-icons
               doom-modeline-major-mode-icon display-icons
               doom-modeline-minor-modes t)))
   #+END_SRC
** TODO rainbow-delimiters
   [2019-03-05 Tue 16:33]
   References:
   - https://github.com/Fanael/rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :defer t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC
** TODO golden-ratio
   [2019-03-07 Thu 13:57]
   References:
   - https://github.com/roman/golden-ratio.el
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :defer t
       :config
       (golden-ratio-mode 1))
   #+END_SRC
* Cleanup
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Garbage Collection
   References:
   - https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413
   - http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html
   - https://batsov.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/
   #+BEGIN_SRC emacs-lisp
     (defun my/after-emacs-startup-gc ()
       (setq file-name-handler-alist last-file-name-handler-alist
             gc-cons-percentage last-gc-cons-percentage
             gc-cons-threshold last-gc-cons-threshold)
       (makunbound 'last-file-name-handler-alist)
       (makunbound 'last-gc-cons-percentage)
       (makunbound 'last-gc-cons-threshold)
       (fmakunbound 'my/after-emacs-startup-gc)
       (remove-hook 'emacs-startup-hook 'my/after-emacs-startup-gc))
     (add-hook 'emacs-startup-hook 'my/after-emacs-startup-gc)
   #+END_SRC
** Run Hooks
References:
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#Startup-Summary
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#Init-File
#+BEGIN_SRC emacs-lisp
  (run-hooks 'after-init-hook 'emacs-startup-hook)
#+END_SRC
* New Content
  :PROPERTIES:
  :header-args: :tangle no
  :END:
** TODO elixir-reformatter
   [2019-03-11 Mon 17:04]
   References:
   - https://github.com/purcell/reformatter.el/
   #+BEGIN_SRC emacs-lisp
     (use-package reformatter
       :defer t
       :init
       (progn
         (require 'f)
         (defconst my/elixir-mix-program
           (f-expand "~/.asdf/shims/mix")))
       :config
       (reformatter-define my/elixir-format
                           :program my/elixir-mix-program
                           :args '("format")))
   #+END_SRC
** TODO exec-path-from-shell
   [2019-02-10 Sun 15:21]
   References:
   - https://github.com/purcell/exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :defer t)
   #+END_SRC
** TODO reformatter
   [2019-02-10 Sun 15:19]
   References:
   - https://github.com/purcell/reformatter.el
   #+BEGIN_SRC emacs-lisp
     (use-package reformatter
       :defer t
       :commands 'reformatter)
   #+END_SRC
