#+STARTUP: content
#+STARTUP: nohideblocks
#+STARTUP: align
#+STARTUP: indent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* References
** Emacs
   - http://sachachua.com/blog/category/geek/emacs/
   - http://sachachua.com/blog/category/geek/emacs/emacs-news/
   - https://www.emacswiki.org/
   - https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf
*** Emacs Lisp
**** Setq vs Defvar
     References:
     - https://emacs.stackexchange.com/questions/29710/whats-the-difference-between-setq-and-defvar
*** Org Mode
**** In-buffer settings
     References
     - https://orgmode.org/manual/In_002dbuffer-settings.html
*** Notable Users
    - https://github.com/Fuco1
    - https://github.com/Malabarba
    - https://github.com/TheBB
    - https://github.com/abo-abo
    - https://github.com/alphapapa
    - https://github.com/bbatsov
    - https://github.com/jwiegley
    - https://github.com/mickeynp
*** Blog Posts
    - https://diego.codes/post/emacs-2018/
** Package Management
*** Straight.el
    - https://github.com/raxod502/straight.el
*** Use-package
    - https://github.com/jwiegley/use-package
* Bootstrap
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Lexical Bindings
   #+BEGIN_SRC emacs-lisp :comments no
     ;; -*- lexical-binding: t -*-
   #+END_SRC
** Emacs Home Directory
   References:
   - https://emacs.stackexchange.com/questions/4253/how-to-start-emacs-with-a-custom-user-emacs-directory
   #+BEGIN_SRC emacs-lisp
     (setq user-init-file (or load-file-name (buffer-file-name))
           user-emacs-directory (file-name-directory user-init-file))
   #+END_SRC
** Garbage Collection
   References:
   - https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413
   - http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html
   - https://batsov.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/
   #+BEGIN_SRC emacs-lisp
     (defvar last-file-name-handler-alist file-name-handler-alist)
     (defvar last-gc-cons-percentage gc-cons-percentage)
     (defvar last-gc-cons-threshold gc-cons-threshold)
     (setq file-name-handler-alist nil
           gc-cons-percentage 0.9
           gc-cons-threshold most-positive-fixnum)
   #+END_SRC
** Straight.el
References:
- https://github.com/raxod502/straight.el/tree/6c47044bfbc419527de4d345ceaf01dea3a3b03d#getting-started
- https://github.com/raxod502/straight.el/issues/41
  #+BEGIN_SRC emacs-lisp
    (setq straight-check-for-modifications '(check-on-save find-when-checking)
          straight-repository-branch "develop")
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+END_SRC
** Use-package
   #+BEGIN_SRC emacs-lisp
     (setq straight-use-package-by-default t
           use-package-compute-statistics t)
     (straight-use-package 'use-package)
   #+END_SRC
** Initialization Profiling
   #+BEGIN_SRC emacs-lisp
     (use-package benchmark-init
       :demand
       :hook (after-init . 'benchmark-init/deactivate))
   #+END_SRC
* Configuration
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Personal Information
   References:
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html
   - http://pages.sachachua.com/.emacs.d/Sacha.html#org21ba8a0
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Shane Sveller"
           user-mail-address "shane@shanesveller.com")
   #+END_SRC
** Scratch buffer contents
   [2019-01-04 Fri 10:11]
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC
* Behavior
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Self-Reload
   References:
   - https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization
   #+BEGIN_SRC emacs-lisp
     (defvar my/config-file
       (concat user-emacs-directory "distribution.org")
       "Location of root .org file governing this Emacs installation.")
     (defun my/edit-config ()
       "Visit .org configuration file via find-file"
       (interactive)
       (find-file my/config-file))
     (defun my/reload-config ()
       "Automatically reloads configuration via org-babel-load-file"
       (interactive)
       (straight-transaction
         (straight-mark-transaction-as-init)
         (org-babel-tangle-file my/config-file)
         (message "Reloading init.el...")
         (load user-init-file nil 'nomessage)
         (message "Reloading init.el... done.")))
   #+END_SRC
** Inhibit File Backups
   References:
   - http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
   - https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil
           create-lockfiles nil
           make-backup-files nil)
   #+END_SRC
** Startup Performance
   References:
   - https://github.com/jschaf/esup
   - https://oremacs.com/2015/02/24/emacs-speed-test/
   #+BEGIN_SRC emacs-lisp
     (use-package esup :commands 'esup)
   #+END_SRC
** Window Management
*** Winner Mode
    #+BEGIN_SRC emacs-lisp
      (winner-mode 1)
    #+END_SRC
* Features
   :PROPERTIES:
   :header-args: :tangle init.el
   :END:
** TODO Evil-Mode
   References:
   - https://github.com/emacs-evil/evil
   - https://www.emacswiki.org/emacs/Evil
   - https://stackoverflow.com/a/22922161
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :init (setq evil-want-C-i-jump nil)
       :config (evil-mode 1))
   #+END_SRC
*** TODO evil-nerd-commenter
   [2019-01-02 Wed 16:07]
   References:
   - https://github.com/redguardtoo/evil-nerd-commenter
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :after evil
       :config (evilnc-default-hotkeys))
   #+END_SRC
** TODO Which-key
   References:
   - https://github.com/justbur/emacs-which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :config (which-key-mode 1))
   #+END_SRC
** TODO Counsel/Ivy/Swiper
   [2018-12-30 Sun 14:47]
   References:
   - https://github.com/abo-abo/swiper
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :config (ivy-mode 1))
   #+END_SRC
** TODO Hydra
   [2018-12-30 Sun 13:28]
   References:
   - https://github.com/abo-abo/hydra
   - https://github.com/abo-abo/hydra/wiki/straight.el
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :defer t
       :config (progn
                 (defhydra hydra-distribution
                   (global-map "<f5>" :exit t)
                   "distribution"
                   ("c" org-capture "capture")
                   ("e" my/edit-config "edit config")
                   ("g" unpackaged/magit-status "magit status")
                   ("i" benchmark-init/show-durations-tree "init durations")
                   ("r" my/reload-config "reload config")
                   ("s" hydra-straight-helper/body "straight.el")
                   ("u" use-package-report "use-package report"))
                 (defhydra hydra-straight-helper (:hint nil)
                   "
     _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
     _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
     ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
     _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
     _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
                   ("c" straight-check-all)
                   ("C" straight-check-package)
                   ("r" straight-rebuild-all)
                   ("R" straight-rebuild-package)
                   ("f" straight-fetch-all)
                   ("F" straight-fetch-package)
                   ("p" straight-pull-all)
                   ("P" straight-pull-package)
                   ("m" straight-merge-all)
                   ("M" straight-merge-package)
                   ("n" straight-normalize-all)
                   ("N" straight-normalize-package)
                   ("u" straight-push-all)
                   ("U" straight-push-package)
                   ("v" straight-freeze-versions)
                   ("V" straight-thaw-versions)
                   ("w" straight-watcher-start)
                   ("W" straight-watcher-quit)
                   ("g" straight-get-recipe)
                   ("e" straight-prune-build)
                   ("q" nil))))
   #+END_SRC
** TODO Magit
   References:
   - https://github.com/magit/magit
   - https://magit.vc/
   - https://magit.vc/manual/magit/Installation.html
   - https://github.com/emacs-evil/evil-magit
   - https://github.com/alphapapa/magit-todos
   - https://github.com/tarsius/git-elisp-overview
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :commands 'magit-status
       :custom (magit-rebase-arguments '("--autosquash" "--autostash" "--interactive")))
     (use-package evil-magit
       :after magit)
     (use-package magit-todos
       :after magit)
   #+END_SRC
*** TODO Forge
    References:
    - https://emacsair.me/2018/12/19/forge-0.1/
    - https://github.com/magit/forge
    - https://magit.vc/manual/forge/
    #+BEGIN_SRC emacs-lisp
      (use-package forge
        :after magit)
    #+END_SRC
*** TODO magit-gitflow
   [2019-01-02 Wed 16:11]
   References:
   - https://github.com/jtatarik/magit-gitflow
   #+BEGIN_SRC emacs-lisp
     (use-package magit-gitflow
       :after magit
       :hook (magit-mode . turn-on-magit-gitflow))
   #+END_SRC
** TODO Org-Mode
References:
- https://orgmode.org/
- https://github.com/emacsmirror/org
- https://github.com/raxod502/straight.el/issues/211#issuecomment-355379837
- https://github.com/raxod502/straight.el/tree/6c47044bfbc419527de4d345ceaf01dea3a3b03d#installing-org-with-straightel
   #+BEGIN_SRC emacs-lisp
     (require 'subr-x)
     (straight-use-package 'git)

     (defun org-git-version ()
       "The Git version of org-mode.
       Inserted by installing org-mode or when a release is made."
       (require 'git)
       (let ((git-repo (expand-file-name
                        "straight/repos/org/" user-emacs-directory)))
         (string-trim
          (git-run "describe"
                   "--match=release\*"
                   "--abbrev=6"
                   "HEAD"))))

     (defun org-release ()
       "The release version of org-mode.
       Inserted by installing org-mode or when a release is made."
       (require 'git)
       (let ((git-repo (expand-file-name
                        "straight/repos/org/" user-emacs-directory)))
         (string-trim
          (string-remove-prefix
           "release_"
           (git-run "describe"
                    "--match=release\*"
                    "--abbrev=0"
                    "HEAD")))))

     (provide 'org-version)

     (use-package org
       :defer t
       :commands (org-babel-tangle-file org-mode)
       :mode (("\\.org$" . org-mode)))
   #+END_SRC
*** TODO Evil-Org
    [2019-01-02 Wed 10:10]
    References:
    - https://github.com/Somelauw/evil-org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org
        :commands 'evil-org-mode
        :hook (org-mode . evil-org-mode)
        :config (progn
                  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
    #+END_SRC
*** TODO Org-Capture
    References:
    - https://orgmode.org/manual/Easy-templates.html
    - https://orgmode.org/manual/Capture-templates.html
    - https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html
    - https://orgmode.org/manual/Template-expansion.html#Template-expansion
    - https://orgmode.org/manual/Templates-in-contexts.html#Templates-in-contexts
    - https://emacs.stackexchange.com/a/42140
    - https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            '(("d" "Distribution" entry
               (file+headline (lambda () (concat user-emacs-directory "distribution.org")) "New Content")
               "** TODO \n   %U\n   References:\n   - \n   #+BEGIN_SRC emacs-lisp\n   #+END_SRC")))
    #+END_SRC
*** TODO Refile Targets
    [2019-01-02 Wed 10:25]
    References:
    - https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/czfzxjj/
    #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets
            (quote (("distribution.org" :maxlevel . 2))))
    #+END_SRC
** TODO Projectile
   [2018-12-30 Sun 14:15]
   References:
   - https://github.com/bbatsov/projectile
   - https://docs.projectile.mx
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :defer t
       :hook (prog-mode . projectile-mode))
   #+END_SRC
** TODO Unpackaged
   References:
   - https://github.com/alphapapa/unpackaged.el
   #+BEGIN_SRC emacs-lisp
     (use-package unpackaged
       :straight (:type git :host github :repo "alphapapa/unpackaged.el")
       :commands 'unpackaged/magit-status)
   #+END_SRC
** TODO Avy
   [2018-12-30 Sun 15:26]
   References:
   - https://github.com/abo-abo/avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :defer t
       :commands (avy-isearch avy-pop-mark avy-resume avy-with)
       :config (progn
                 (avy-setup-default)
                 (global-set-key (kbd "C-c C-j") 'avy-resume)))
   #+END_SRC
** TODO Imenu-List
   [2019-01-02 Wed 10:29]
   References:
   - https://github.com/bmag/imenu-list
   #+BEGIN_SRC emacs-lisp
     (use-package imenu-list
       :defer t
       :init
       (setq imenu-list-focus-after-activation t
             imenu-list-auto-resize t))
   #+END_SRC
** TODO General
   [2019-01-02 Wed 10:39]
   References:
   - https://github.com/noctuid/general.el
   #+BEGIN_SRC emacs-lisp
     (use-package general)
   #+END_SRC
** TODO Company
   [2019-01-02 Wed 11:58]
   References:
   - http://company-mode.github.io/
   - https://github.com/company-mode/company-mode/wiki/Third-Party-Packages
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :commands (company-mode global-company-mode)
       :hook (after-init . global-company-mode))
   #+END_SRC
** TODO Flycheck
   [2019-01-02 Wed 12:04]
   References:
   - http://www.flycheck.org/en/latest/
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :commands (flycheck-mode global-flycheck-mode)
       :hook (after-init . global-flycheck-mode))
   #+END_SRC
*** TODO flycheck-inline
   [2019-01-02 Wed 15:55]
   References:
   - https://github.com/flycheck/flycheck-inline
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-inline
       :defer t
       :after flycheck
       :hook (flycheck-mode . turn-on-flycheck-inline))
   #+END_SRC
** TODO smartparens
   [2019-01-02 Wed 16:58]
   References:
   - https://github.com/Fuco1/smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :defer t
       :commands 'smartparens-mode)
   #+END_SRC
* Languages
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** TODO LSP
*** TODO lsp-mode
   [2019-01-02 Wed 16:14]
   References:
   - https://github.com/emacs-lsp/lsp-mode
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode :commands lsp)

     (use-package lsp-ui :commands lsp-ui-mode)

     (use-package company-lsp :commands company-lsp)
   #+END_SRC
** TODO Clojure
*** TODO cider
   [2019-01-02 Wed 15:47]
   References:
   - https://github.com/clojure-emacs/cider
   #+BEGIN_SRC emacs-lisp
     (use-package cider
       :defer t
       :commands (cider-connect cider-jack-in))
   #+END_SRC
** TODO Elixir
*** TODO elixir-mode
   [2019-01-02 Wed 14:34]
   References:
   - https://github.com/elixir-editors/emacs-elixir
   #+BEGIN_SRC emacs-lisp
     (use-package elixir-mode
       :commands 'elixir-mode)
   #+END_SRC
*** TODO Alchemist
   [2019-01-02 Wed 14:36]
   References:
   - https://github.com/tonini/alchemist.el
   - https://alchemist.readthedocs.io/en/latest/configuration/
   #+BEGIN_SRC emacs-lisp
     (use-package alchemist
       :after 'elixir-mode)
   #+END_SRC
*** TODO lsp-elixir
   [2019-01-03 Thu 15:44]
   References:
   - https://github.com/trevoke/lsp-elixir
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-elixir
       :after (lsp-mode)
       :straight (:type git :host github :repo "trevoke/lsp-elixir")
       :hook (elixir-mode . lsp)
       :config (when-let (elixir-ls-path (getenv "ELIXIR_LS_PATH"))
                 (add-to-list 'exec-path elixir-ls-path)))
   #+END_SRC
*** TODO flycheck-mix
   [2019-02-08 Fri 19:16]
   References:
   - https://github.com/tomekowal/flycheck-mix
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-mix
       :after 'elixir-mode
       :commands 'flycheck-mix-setup
       :config
       (flycheck-mix-setup))
   #+END_SRC
** TODO Emacs-Lisp
*** TODO lispy
    [2019-01-02 Wed 15:08]
    References:
    - https://github.com/abo-abo/lispy
    - https://github.com/jwiegley/use-package#hooks
    #+BEGIN_SRC emacs-lisp
      (use-package lispy
        :commands 'lispy-mode
        :hook (emacs-lisp-mode . lispy-mode))
    #+END_SRC
** TODO Rust
*** TODO rust-mode
   [2019-01-02 Wed 14:40]
   References:
   - https://github.com/rust-lang/rust-mode
   - https://github.com/jwiegley/use-package#modes-and-interpreters
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :defer t
       :commands 'rust-mode
       :config (setq rust-format-on-save t))
   #+END_SRC
*** TODO flycheck-rust
   [2019-01-02 Wed 14:42]
   References:
   - https://github.com/flycheck/flycheck-rust
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     ;; (with-eval-after-load 'rust-mode
     ;;   (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
     (use-package flycheck-rust
       :after rust-mode
       :hook (flycheck-mode-hook . flycheck-rust-setup))
   #+END_SRC
*** TODO racer
   [2019-01-02 Wed 14:44]
   References:
   - https://github.com/racer-rust/emacs-racer
   - https://github.com/jwiegley/use-package#hooks
   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'rust-mode-hook #'racer-mode)
     ;; (add-hook 'racer-mode-hook #'eldoc-mode)
     (use-package racer
       :defer t
       :after rust-mode
       :hook ((rust-mode-hook . racer-mode)
              (racer-mode-hook . eldoc-mode)))
   #+END_SRC
*** TODO toml-mode
   [2019-01-02 Wed 14:50]
   References:
   - https://github.com/dryman/toml-mode.el
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :defer t
       :mode "/\\(Cargo.lock\\|\\.cargo/config\\)\\'")
   #+END_SRC
*** TODO cargo
   [2019-01-02 Wed 16:45]
   References:
   - https://github.com/kwrooijen/cargo.el
   #+BEGIN_SRC emacs-lisp
     (use-package cargo
       :defer t
       :commands 'cargo-minor-mode
       :hook (rust-mode . cargo-minor-mode))
   #+END_SRC
** TODO Web Technologies
*** TODO web-mode
   [2019-01-02 Wed 14:38]
   References:
   - http://web-mode.org/
   - https://github.com/fxbois/web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :defer t
       :commands 'web-mode)
   #+END_SRC
** TODO Nix
*** TODO nix-mode
   [2019-01-02 Wed 17:06]
   References:
   - https://github.com/NixOS/nix-mode
   #+BEGIN_SRC emacs-lisp
     (use-package nix-mode
       :defer t
       :mode "\\.nix$\\'")
   #+END_SRC
* Appearance
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Disable menu bar
   [2019-01-02 Wed 16:48]
   References:
   - https://www.emacswiki.org/emacs/MenuBar
   - https://www.emacswiki.org/emacs/ToolBar
   - https://stackoverflow.com/a/5795518
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (when (display-graphic-p)
       (tool-bar-mode -1))
   #+END_SRC
** TODO Doom Theme
   [2018-12-30 Sun 15:22]
   References:
   - https://github.com/hlissner/emacs-doom-themes
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package doom-themes
       :init (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                   doom-themes-enable-italic t) ; if nil, italics is universally disabled
       :config (progn
                 (load-theme 'doom-tomorrow-night t)
                 (doom-themes-visual-bell-config)
                 (with-eval-after-load 'org (doom-themes-org-config))))
   #+END_SRC
** TODO Minion/Moody
   [2018-12-30 Sun 15:38]
   References:
   - https://diego.codes/post/emacs-2018/
   - http://manuel-uberti.github.io/emacs/2018/03/10/moody-and-minions/
   - https://github.com/tarsius/minions
   - https://github.com/tarsius/moody
   #+BEGIN_SRC emacs-lisp
     (use-package moody
       :config
       (setq x-underline-at-descent-line t)
       (moody-replace-mode-line-buffer-identification)
       (moody-replace-vc-mode))

     (use-package minions
       :config (minions-mode 1))
   #+END_SRC
** TODO base16-theme
   [2019-01-02 Wed 16:29]
   References:
   - https://github.com/belak/base16-emacs
   #+BEGIN_SRC emacs-lisp
     (use-package base16-theme
       :config (load-theme 'base16-tomorrow-night t))
   #+END_SRC
* Cleanup
  :PROPERTIES:
  :header-args: :tangle init.el
  :END:
** Garbage Collection
   References:
   - https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413
   - http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
   - https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html
   - https://batsov.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/
   #+BEGIN_SRC emacs-lisp
     (defun my/after-emacs-startup-gc ()
       (setq file-name-handler-alist last-file-name-handler-alist
             gc-cons-percentage last-gc-cons-percentage
             gc-cons-threshold last-gc-cons-threshold)
       (makunbound 'last-file-name-handler-alist)
       (makunbound 'last-gc-cons-percentage)
       (makunbound 'last-gc-cons-threshold)
       (fmakunbound 'my/after-emacs-startup-gc))
     (add-hook 'emacs-startup-hook 'my/after-emacs-startup-gc)
   #+END_SRC
* New Content
  :PROPERTIES:
  :header-args: :tangle no
  :END:
